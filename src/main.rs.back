use std::process::Command;
use std::fs;

mod formatter;
fn main() {
    println!("Hello, world!");

    //input video link
    let url  = "https://www.bilibili.com/video/BV1jt411K7ve/?spm_id_from=333.337.search-card.all.click&vd_source=46d4822f774ace4bac2ddbb78bee4dc3";

    let video_path = "result/video.mp4";
    let audio_path = "result/audio.mp3";
    let json_path = "result/output.json";
    let lrc_path = "result/output.text";

    // //download this video
    // println!("[1/4] 下载视频...");
    // download_video(url, video_path);
    // //extract audio from the video
    // println!("[2/4] 提取音频...");
    // extract_audio(video_path, audio_path);
    // //split the audio into array list and order

    //covert the arry list to text and add to file
    println!("[3/4] 调用 Whisper...");
    covert_audio_2_text(audio_path);

    println!("[4/4] 输出 text 文件...");
    formatter::generate_lrc(json_path, lrc_path);
}


fn download_video(url: &str, path: &str){
    Command::new("yt-dlp")
    .args([
        "-f", "30032+30280",
        "-o", path,
        url,
    ])
    .status()
    .expect("Video Download failed");
}


fn extract_audio(video_path: &str, audio_path: &str){
    Command::new("ffmpeg")
        .args(["-i", video_path, "-vn", "-acodec", "libmp3lame", audio_path])
        .status()
        .expect("Extract audio failed");
}

fn covert_audio_2_text(audio_path:&str ){    
    Command::new("python3")
        .args(["whisper_transcribe.py", audio_path])
        .status()
        .expect("Convert Error");
}